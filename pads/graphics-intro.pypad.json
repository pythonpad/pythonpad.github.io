{
    "id": "graphics-intro",
    "title": "Supermario",
    "src": "from cs1graphics import *\nfrom time import sleep\n\n_scene = None\n_world = None\n\nt = 0.2\n\ndef create_world():\n    global _scene, _world\n    if _scene:\n        raise RuntimeError(\"A world already exists!\")\n    _world = _World(500, 300)\n    _scene = Canvas(_world.width, _world.height)\n    _scene.setTitle(\"Mario World\")\n    _world.draw_scene()\n\nclass _World(object):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def draw_scene(self):\n        \"\"\"\n        draw background here\n        Don't forget _scene.add(name)\n        \"\"\"\n        grass = Rectangle(1000, 150, Point(250, 250))\n        grass.setFillColor('green')\n        grass.setDepth(100)\n        _scene.add(grass)\n\n        #blocks\n        block = Rectangle(40, 40, Point(200, 100))\n        block.setFillColor('brown')\n\n        qmark = Text(\"?\", 20, Point(200, 100))\n        qmark.setFontColor('Yellow')\n        qmark.setDepth(48)\n        _scene.add(qmark)\n\n        block2 = block.clone()\n        block2.move(40, 0)\n        block.setDepth(50)\n        _scene.add(block)\n        _scene.add(block2)\n\n        #pipe\n        pipe = Polygon(Point(400, 150), Point(400, 160), Point(410, 160), Point(410, 320), Point(470, 320), Point(470, 160), Point(480, 160), Point(480, 150))\n        pipe.setFillColor('lightgreen')\n        pipe.setDepth(10)\n        pipe.move(-10, 0)\n        _scene.add(pipe)\n\n\nclass Mushroom(object):\n    def __init__(self, x=200, y=92):\n        mushroom = Layer()\n        uppermush = Ellipse(38, 18, Point(x, y))\n        uppermush.setFillColor('red')\n        uppermush.setDepth(52)\n        lowermush = Ellipse(35, 25, Point(x, y+8))\n        lowermush.setFillColor('beige')\n        lowermush.setDepth(53)\n        mushroom.add(lowermush)\n        mushroom.add(uppermush)\n        mushroom.setDepth(52)\n\n        self.layer = mushroom\n        _scene.add(self.layer)\n\n    def diappear(self):\n        self.layer.scale(0.001)\n\n    def move(self, x, y):\n        self.layer.move(x, y)\n\n    def arise(self):\n        self.layer.setDepth(45)\n        self.layer.move(0, -20)\n\n\n\nCOLOR = ['Red', 'Blue']\nTYPE = ['super', 'normal']\n\nclass Mario(object):\n    def __init__(self, color='Blue', type='normal'):\n        assert type in TYPE and color in COLOR\n        self.color = color\n        self.type = type\n        self.step_size = 3\n\n    # Constructing Mario\n        mario = Layer()\n        # body\n        body = Rectangle(33, 22, Point(200, 200))\n        body.setFillColor(color)\n        body.setDepth(50)\n        mario.add(body)\n\n        # face\n        face = Ellipse(30, 20, Point(200, 180))\n        face.setFillColor('beige')\n        face.setDepth(40)\n        mario.add(face)\n\n        #hat\n        hat = Polygon(Point(185, 175), Point(220, 175), Point(220, 173), Point(215, 173), Point(212, 168), Point(188, 168))\n        hat.setFillColor(color)\n        hat.setDepth(39)\n        mario.add(hat)\n\n        #beard\n        beard = Polygon(Point(207, 183), Point(217, 183), Point(215, 180), Point(209, 180))\n        beard.setFillColor('Brown')\n        beard.setDepth(38)\n        mario.add(beard)\n\n        shoe = Layer()\n        #left shoe\n        lshoe = Rectangle(15, 6, Point(191, 215))\n        lshoe.setFillColor('black')\n        lshoe.setDepth(52)\n        shoe.add(lshoe)\n\n        #right shoe\n        rshoe = lshoe.clone()\n        rshoe.move(17, 0)\n        shoe.add(rshoe)\n        mario.add(shoe)\n\n        # save alias of moveable parts\n        self.layer = mario\n        self.body = body\n        self.hat = hat\n        self.shoe = shoe\n        _scene.add(self.layer)\n\n        self.moving_part_count = 0\n\n        if type == 'super':\n            self.supermario()\n\n\n    def shoe_move(self):\n\n        if self.moving_part_count % 3 == 0:\n            self.shoe.move(3, 0)\n        elif self.moving_part_count % 3 == 1:\n            self.shoe.move(-5,0)\n        else: self.shoe.move(2,0)\n        self.moving_part_count += 1\n        if self.moving_part_count % 3 == 0: self.moving_part_count = 0\n\n    def move(self,x=10,y=0):\n        self.layer.move(x,y)\n\n\n    def supermario(self):\n        tempPt = self.body.getReferencePoint()\n        self.layer.adjustReference(tempPt.getX(), tempPt.getY())\n        for i in range(3):\n            self.layer.scale(1.3)\n            sleep(t/2)\n            self.layer.scale(0.9)\n            sleep(t/2)\n\n    def walk(self,x=20):\n        assert x > 0\n        total_step = int(x / self.step_size)\n        for i in range(total_step):\n            sleep(t/4)\n            self.move(self.step_size, 0)\n            self.shoe_move()\n\ndef show_animation():\n    sleep(t)\n    mario.move(0, -50)\n    mushroom.arise()\n\n    sleep(t)\n    mario.move(0, 50)\n    mushroom.move(0, 8)\n\n    for i in range(7):\n        sleep(t/2)\n        mushroom.move(10, 0)\n        mario.move(10, 0)\n        mario.shoe_move()\n        sleep(t/2)\n        mario.shoe_move()\n\n    sleep(t/2)\n    mushroom.move(0, 50)\n    mario.move(10, 0)\n    mario.shoe_move()\n    sleep(t/2)\n    mario.shoe_move()\n\n    sleep(t)\n    mushroom.move(0, 50)\n\n    sleep(t/2)\n    mushroom.diappear()\n    sleep(t/2)\n    mario.supermario()\n\n    for i in range(6):\n        sleep(t/2)\n        mario.move(10, 0)\n        mario.shoe_move()\n        sleep(t/2)\n        mario.shoe_move()\n\n    for i in range(2):\n        sleep(t)\n        mario.move(28, -60)\n\n    for i in range(1):\n        sleep(t)\n        mario.move(32, 40)\n\n    sleep(2*t)\n    for i in range(4):\n        sleep(t)\n        mario.move(0, 25)\n\ncreate_world()\nmario = Mario('Blue', 'normal')\nmushroom = Mushroom(200, 92)\n\nshow_animation()\n",
    "files": {}
}